shiny::runApp()
runApp()
runApp('~/Downloads/DSCI-532-IA-mikem2m-main/src')
runApp('~/Downloads/DSCI-532-IA-mikem2m-main/src')
runApp()
ggplot(filtered_data(), aes(x = population_share, y = tv_audience_share, color = confederation)) +
geom_point(size = 3) +
labs(title = "Population Share vs. TV Audience Share",
x = "Population Share (%)",
y = "TV Audience Share (%)") +
theme_minimal()
server <- function(input, output) {
# Filter data based on user inputs
filtered_data <- reactive({
fifa_data %>%
filter(confederation == input$confederation,
population_share >= input$population_share[1] & population_share <= input$population_share[2],
tv_audience_share >= input$tv_audience_share[1] & tv_audience_share <= input$tv_audience_share[2])
})
# Scatter plot
output$scatter_plot <- renderPlot({
ggplot(filtered_data(), aes(x = population_share, y = tv_audience_share, color = confederation)) +
geom_point(size = 3) +
labs(title = "Population Share vs. TV Audience Share",
x = "Population Share (%)",
y = "TV Audience Share (%)") +
theme_minimal()
})
# Data table
output$data_table <- renderDT({
datatable(filtered_data(), options = list(pageLength = 10))
})
# Summary statistics
output$summary_stats <- renderPrint({
summary(filtered_data()[, c("population_share", "tv_audience_share", "gdp_weighted_share")])
})
}
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document")
install.packages("DT")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
runApp('Untitled.R')
library(shiny); runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
runApp('Untitled.R')
shiny::runApp()
shiny::runApp()
